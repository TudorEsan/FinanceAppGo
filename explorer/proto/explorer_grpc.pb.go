// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/explorer.proto

package explorer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressExplorerClient is the client API for AddressExplorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressExplorerClient interface {
	GetBtcBallance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressOverview, error)
	GetEthBallance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressOverview, error)
	GetErc20TokenHoldings(ctx context.Context, in *Address, opts ...grpc.CallOption) (*WalletOverview, error)
}

type addressExplorerClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressExplorerClient(cc grpc.ClientConnInterface) AddressExplorerClient {
	return &addressExplorerClient{cc}
}

func (c *addressExplorerClient) GetBtcBallance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressOverview, error) {
	out := new(AddressOverview)
	err := c.cc.Invoke(ctx, "/AddressExplorer/GetBtcBallance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressExplorerClient) GetEthBallance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddressOverview, error) {
	out := new(AddressOverview)
	err := c.cc.Invoke(ctx, "/AddressExplorer/GetEthBallance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressExplorerClient) GetErc20TokenHoldings(ctx context.Context, in *Address, opts ...grpc.CallOption) (*WalletOverview, error) {
	out := new(WalletOverview)
	err := c.cc.Invoke(ctx, "/AddressExplorer/GetErc20TokenHoldings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressExplorerServer is the server API for AddressExplorer service.
// All implementations must embed UnimplementedAddressExplorerServer
// for forward compatibility
type AddressExplorerServer interface {
	GetBtcBallance(context.Context, *Address) (*AddressOverview, error)
	GetEthBallance(context.Context, *Address) (*AddressOverview, error)
	GetErc20TokenHoldings(context.Context, *Address) (*WalletOverview, error)
	mustEmbedUnimplementedAddressExplorerServer()
}

// UnimplementedAddressExplorerServer must be embedded to have forward compatible implementations.
type UnimplementedAddressExplorerServer struct {
}

func (UnimplementedAddressExplorerServer) GetBtcBallance(context.Context, *Address) (*AddressOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBtcBallance not implemented")
}
func (UnimplementedAddressExplorerServer) GetEthBallance(context.Context, *Address) (*AddressOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthBallance not implemented")
}
func (UnimplementedAddressExplorerServer) GetErc20TokenHoldings(context.Context, *Address) (*WalletOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErc20TokenHoldings not implemented")
}
func (UnimplementedAddressExplorerServer) mustEmbedUnimplementedAddressExplorerServer() {}

// UnsafeAddressExplorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressExplorerServer will
// result in compilation errors.
type UnsafeAddressExplorerServer interface {
	mustEmbedUnimplementedAddressExplorerServer()
}

func RegisterAddressExplorerServer(s grpc.ServiceRegistrar, srv AddressExplorerServer) {
	s.RegisterService(&AddressExplorer_ServiceDesc, srv)
}

func _AddressExplorer_GetBtcBallance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressExplorerServer).GetBtcBallance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AddressExplorer/GetBtcBallance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressExplorerServer).GetBtcBallance(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressExplorer_GetEthBallance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressExplorerServer).GetEthBallance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AddressExplorer/GetEthBallance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressExplorerServer).GetEthBallance(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressExplorer_GetErc20TokenHoldings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressExplorerServer).GetErc20TokenHoldings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AddressExplorer/GetErc20TokenHoldings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressExplorerServer).GetErc20TokenHoldings(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressExplorer_ServiceDesc is the grpc.ServiceDesc for AddressExplorer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressExplorer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AddressExplorer",
	HandlerType: (*AddressExplorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBtcBallance",
			Handler:    _AddressExplorer_GetBtcBallance_Handler,
		},
		{
			MethodName: "GetEthBallance",
			Handler:    _AddressExplorer_GetEthBallance_Handler,
		},
		{
			MethodName: "GetErc20TokenHoldings",
			Handler:    _AddressExplorer_GetErc20TokenHoldings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/explorer.proto",
}
